# from __future__ import absolute_import, unicode_literals
from decouple import config
from celery import Celery

import os
from dotenv import load_dotenv

"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path


MODE='2'


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-gl22_9!23fr+hgxw%xa2p6t#k60t6j%zvs6%4autn^)8m!k-iw'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1',]


INTERNAL_IPS = [
    # ...
    "127.0.0.1",
    # ...
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    #my app
    'accounts',
    'products',
    'orders',
    'carts',
    'peyments',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    # Other apps…
    'jalali_date',
    'phonenumber_field',
    'mathfilters',
    'ckeditor',
    'debug_toolbar',
    'rosetta',
    'django.contrib.humanize',
    'crispy_forms',
    'solo',
    'celery',
   




]

MIDDLEWARE = [
'django.middleware.security.SecurityMiddleware',
'django.contrib.sessions.middleware.SessionMiddleware',
'django.middleware.common.CommonMiddleware',
'django.middleware.csrf.CsrfViewMiddleware',
'django.contrib.auth.middleware.AuthenticationMiddleware',
'django.contrib.messages.middleware.MessageMiddleware',
'django.middleware.clickjacking.XFrameOptionsMiddleware',
"debug_toolbar.middleware.DebugToolbarMiddleware",
"allauth.account.middleware.AccountMiddleware",
]
 

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR.joinpath('templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                #custom
                'carts.cart_context.cart',
                'products.category_context.category1',
                # `allauth` needs this from django
                'django.template.context_processors.request',
                #other app
                
            ],
        },
    },
]
#############################
WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {

}
if MODE!='1':
    DATABASES={
         'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'postgres',
        'USER': 'postgres',
        'PASSWORD': 'postgres',
        'HOST': 'db',
        'PORT': 5432
    }
    }
else:
    # DATABASES={
    #         'default': {
    #     'ENGINE': 'django.db.backends.mysql',
    #     'NAME': 'torento',
    #     'USER': 'root',
    #     'PASSWORD': '1744285721',
    #     'HOST': 'localhost',
    #     'PORT': 5432
        
    #   }
    
    # }
    DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
    
    
# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

# LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = 'fa'

LANGUAGES=(
    ('en','English'),
    ('fa','persian')
)

# TIME_ZONE = 'UTC'
TIME_ZONE = 'Asia/Tehran'

USE_I18N = True
USE_L10N=True
USE_TZ = True

# import localef
# locale.setlocale(locale.LC_ALL, "Persian_Iran.UTF-8")


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#use CustomUser for defult model user
AUTH_USER_MODEL = 'accounts.CustomUser'

# media config

MEDIA_URL = '/media/'
MEDIA_ROOT = str(BASE_DIR.joinpath('media'))


#all atuh config
AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by email
    'allauth.account.auth_backends.AuthenticationBackend',
]



# django all auth config
SITE_ID = 1
ACCOUNT_SESSION_REMEMBER = True
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'username_email'
ACCOUNT_EMAIL_VERIFICATION="mandatory"
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

LOGIN_REDIRECT_URL ='profile'
LOGOUT_REDIRECT_URL ='home'
LOGIN_URL='account_login'
LOGOUT_URL='account_logout'
ACCOUNT_FORMS = {'signup': 'accounts.forms.CustomSignupForm'}

USE_THOUSAND_SEPARATOR = True



# static config
STATIC_URL = 'static/'
STATICFILES_DIRS = [str(BASE_DIR.joinpath('static'))]

STATIC_ROOT=BASE_DIR.joinpath('staticfiles')



#zarinpal config
MERCHENT_KEY='0000-0000-0000-0000'




# SESSION_SERIALIZER = 'django.contrib.sessions.serializers.JSONSerializer'
# if MODE!='1':
#     SESSION_SERIALIZER = 'django.contrib.sessions.serializers.JSONSerializer'
# else:
#     SESSION_SERIALIZER = 'django.contrib.sessions.serializers.PickleSerializer'
    
    
    
#jalali date



# default settings (optional)
JALALI_DATE_DEFAULTS = {
   # if change it to true then all dates of the list_display will convert to the Jalali.
   'LIST_DISPLAY_AUTO_CONVERT': False,
   'Strftime': {
        'date': '%y/%m/%d',
        'datetime': '%H:%M:%S _ %y/%m/%d',
    },
    'Static': {
        'js': [
            # loading datepicker
            'admin/js/django_jalali.min.js',
            # OR
            # 'admin/jquery.ui.datepicker.jalali/scripts/jquery.ui.core.js',
            # 'admin/jquery.ui.datepicker.jalali/scripts/calendar.js',
            # 'admin/jquery.ui.datepicker.jalali/scripts/jquery.ui.datepicker-cc.js',
            # 'admin/jquery.ui.datepicker.jalali/scripts/jquery.ui.datepicker-cc-fa.js',
            # 'admin/js/main.js',
        ],
        'css': {
            'all': [
                'admin/jquery.ui.datepicker.jalali/themes/base/jquery-ui.min.css',
            ]
        }
    },
}

# LANGUAGE_CODE = 'fa'
load_dotenv()

EMAIL_BACKEND = os.getenv('EMAIL_BACKEND')
EMAIL_USE_TLS =os.getenv('EMAIL_USE_TLS')
EMAIL_HOST = os.getenv('EMAIL_HOST')
EMAIL_PORT = os.getenv('EMAIL_PORT')
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL=os.getenv('DEFAULT_FROM_EMAIL')

# Load environment variables from .env file


# متغیرهای محیطی
RABBITMQ_HOST = os.getenv('RABBITMQ_HOST', default='localhost')

RABBITMQ_USER = os.getenv('RABBITMQ_USER', default='guest')
RABBITMQ_PASSWORD = os.getenv('RABBITMQ_PASSWORD', default='guest')


# RABBITMQ_HOST = 'localhost'
RABBITMQ_PORT ='5672'
# RABBITMQ_USER ='guest'
# RABBITMQ_PASSWORD = 'guest'

# # ساخت URL برای Celery broker
CELERY_BROKER_URL = f'amqp://{RABBITMQ_USER}:{RABBITMQ_PASSWORD}@{RABBITMQ_HOST}:{RABBITMQ_PORT}//'

# ایجاد شیء Celery
app = Celery('config')

# تنظیمات Celery
app.conf.broker_url = CELERY_BROKER_URL
# app.conf.broker_url = 'amqp://guest:guest@localhost:5672//'
app.conf.result_backend = 'rpc://'
